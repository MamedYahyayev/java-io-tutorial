InputStream

InputStream is an abstract class, it can't be instantiated, it is a base class of all input streams.
InputStream reads data one byte at a time.

read() - this method reads the bytes one at a time and it will returns -1 if there are no more bytes.

read(byte[] b) - this method reads the bytes then will store it in the byte[] array which is b.

read(byte[] b,int off, int len) - this method also do same job, but it will writes value to byte[] array according to off and len parameter
off - this is starting position of byte[] array
len - how many bytes do it read into byte[] array

For example:
inputStream.read(b, 2, 3);
off - 2 (starting position)
len - 3 (how many bytes do it read into byte[] array)
0 0 49 50 51 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


readAllBytes() - this method reads all of bytes in the file, it is faster than other read method, it returns byte[] array

available() - Returns an estimate of the number of bytes that can be read

skip(int n) - this method skip the number of bytes, it will return long value which is the skipped bytes number
For example,
this is the result before skipping:             49 50 51 52 53 54 55 55 56 56 57 48 97 49 50 51 52 50 49 33
this is the result after skipping 3 elements:   52 53 54 55 55 56 56 57 48 97 49 50 51 52 50 49 33


skipNBytes(int n) - this method does same job as skip(int n)  but it won't return anything this method type is void




OutputStream

Performance for writing
write(int n)
write(byte[] b) - this is faster than write(int n)

flush()
When you write data to a stream, it is not written immediately, and it is buffered. 
So use flush() when you need to be sure that all your data from buffer is written.
We need to be sure that all the writes are completed before we close the stream, and that is why flush() is called in file


FileInputStream

FileInputStream fileInputStream = new FileInputStream(); we have to pass argument to its constructor
We can pass String object, or object of File class or FileDescriptor object

Performance for reading
read()
read(byte[] b) - this is faster than above

FileOutputStream

FileOutputStream out = new FileOutputStream(); - we have to pass argument to its constructor
We can pass String object, or object of File class or FileDescriptor object
It has same methods as OutputStream.

Performance for writing
write(int n)
write(byte[] b) - this is faster than above

RandomAccessFile

This class takes 2 argument on the constructor, the first one is file path or file name, the second one is access modes
Here are all access modes in RandomAccessFile
r - read mode
rw - read and write mode
rwd - read and write mode - synchronously.
rws - read and write mode - synchronously.

seek(int n) - this method allow to start from specific position for reading or writing
for instance,
file.seek(100); - it will start from position 100


getFilePosition() - this will return current position of file   

file.seek(10);
file.getFilePosition(); - it will return 10 becuase of seek() method


read() and write() method are the same in other io classes.


File class and its methods
file.createNewFile() - to creat new file
file.exists() - check file exist or not
file.mkdir() - create directory
file.mkdirs() - create multiple directory
file.length() - return file length
file.renameTo(new File(destination)) - rename or move file from one place to another
file.delete() - delete file
file.isDirectory() - check file is directory or not
directory.list() - returns list of file which placed in the current directory